name: Build and test image

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  IMAGE     : overv/openstreetmap-tile-server
  TAG       : ${{ github.ref_name }}

jobs:

  build:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Docker build
      uses: docker/build-push-action@v2
      with:
        pull       : true
        context    : .
        file       : ./Dockerfile
        tags       : ${{env.IMAGE}}:${{env.TAG}}
        cache-from : ${{env.IMAGE}}:latest
        outputs    : type=docker,dest=/tmp/image.tar
      env:
        DOCKER_BUILDKIT   : 1
        BUILDKIT_PROGRESS : plain

    - name: Compress image
      run : gzip  /tmp/image.tar

    - name: Upload image
      uses: actions/upload-artifact@v2
      with:
        name: image
        path: /tmp/image.tar.gz

  test:
    runs-on: ubuntu-latest
    needs: build
    env:
      VOLUME    : osm-db
      CONTAINER : osm-www
      MOUNT     : /var/lib/postgresql/14/main
      HASHES    : '61b3d1499d7e5b18c028f7c24e22d627077491cf *000.png
76c74807d26bcae81658103857453a417050abdc *100.png
4b03701322d032602762672923efedb24da3f3a0 *101.png
f40e6783644e9b2acf5dacef68345ad4dddb7c0a *110.png
8a7154700de9a5be33a73aedcac8571a2aff5243 *111.png
c226ca747874fb1307eef853feaf9d8db28cef2b *empty.png'
    steps:

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Download image
      uses: actions/download-artifact@v2
      with:
        name: image
        path: /tmp/

    - name: Load image
      run : docker  load  --input /tmp/image.tar.gz

    - name: Create volume
      run : docker  volume  create  ${VOLUME}

    - name: Import Luxembourg
      run : docker  run  --rm  -v ${VOLUME}:${MOUNT}  ${IMAGE}:${TAG}  import

    - name: Start web server
      run : docker  run  --rm  -v ${VOLUME}:${MOUNT}  -p 80:80  -d  --name ${CONTAINER}  ${IMAGE}:${TAG}  run

    - name: Sleep
      run : sleep 30

    - name: Download tiles
      run : |
        curl  http://localhost/0/0/0.png            --fail  -o 000.png
        curl  http://localhost/1/0/0.png            --fail  -o 100.png
        curl  http://localhost/1/0/1.png            --fail  -o 101.png
        curl  http://localhost/1/1/0.png            --fail  -o 110.png
        curl  http://localhost/1/1/1.png            --fail  -o 111.png
        curl  http://localhost/18/138474/85459.png  --fail  -o empty.png
        curl  http://localhost/18/135536/89345.png  --fail  -o example.png

    - name: Verify checksums
      run : echo  "${HASHES}"  |  sha1sum  --check  -

    - name: Verify example tile not empty
      run : |
        ! diff  empty.png  example.png  ||  echo  "ERROR: example.png is empty"

    - name: Stop web server
      run : docker  rm  --force  --volumes  ${CONTAINER}

    - name: Remove volume
      run : docker  volume  rm  --force  ${VOLUME}

    - name: Remove image
      run : docker  rmi  --force  ${IMAGE}:${TAG}
